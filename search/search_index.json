{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My MkDocs Site","text":""},{"location":"about/","title":"test for about","text":"<ol> <li>Option one  </li> <li>Option two  </li> <li>Option three  </li> <li>Option four  </li> </ol>"},{"location":"contact/","title":"test for contact","text":""},{"location":"course-description/","title":"test for course description","text":"<p>Generate a Summary</p> <p>Please summarize the following passage using key bullet points.</p>"},{"location":"glossary/","title":"test for glossary","text":""},{"location":"how-we-built-this-site/","title":"test for how we built this site","text":""},{"location":"license/","title":"test for license","text":""},{"location":"references/","title":"test for references","text":""},{"location":"toc/","title":"test for table of content","text":""},{"location":"chapters/","title":"Welcome to My MkDocs Site","text":""},{"location":"chapters/chapter-1/","title":"Chapter 1: Introduction to Microcontrollers &amp; PIC24FJ64GA002","text":""},{"location":"chapters/chapter-1/#what-is-a-microcontroller","title":"What is a Microcontroller?","text":"<p>A microcontroller is a compact, self-contained computer system built onto a single integrated circuit. It includes a CPU (central processing unit), memory, and peripherals, making it well-suited for controlling embedded systems and real-world devices.</p>"},{"location":"chapters/chapter-1/#microcontroller-block-diagram","title":"Microcontroller Block Diagram","text":"<p>This diagram shows the typical internal structure of a microcontroller. The CPU core is supported by built-in memory and several peripheral modules such as timers, communication interfaces, and analog components.</p> <p> </p> <p>Unlike general-purpose computers, microcontrollers are designed for specific tasks, such as reading sensor data, driving motors, or communicating with other digital components. They are commonly used in systems that need low power, high reliability, and consistent timing.</p>"},{"location":"chapters/chapter-1/#key-characteristics","title":"Key Characteristics:","text":"<ul> <li>Small footprint: Microcontrollers are tiny, often used in devices with limited space.</li> <li>Real-time control: They\u2019re designed for deterministic behavior \u2014 ideal for time-sensitive applications.</li> <li>Integrated peripherals: Timers, analog-to-digital converters (ADCs), communication modules (UART, SPI, I2C), and more are built-in.</li> <li>Low power consumption: Designed for efficiency, especially in battery-powered devices.</li> </ul>"},{"location":"chapters/chapter-1/#common-use-cases","title":"Common Use Cases:","text":"<ul> <li>Home automation (e.g., smart thermostats)</li> <li>Robotics and motion control</li> <li>Automotive systems (e.g., airbag control)</li> <li>Industrial sensors and actuators</li> <li>Wearable electronics</li> </ul> <p>Microcontrollers are the backbone of embedded systems \u2014 small, purpose-built devices that power our modern, connected world.</p>"},{"location":"chapters/chapter-1/#common-microcontroller-applications","title":"Common Microcontroller Applications","text":"<p>Microcontrollers are used in thousands of everyday systems, often hidden inside devices that respond to inputs, control outputs, or handle timing and communication.</p> <p>Some common microcontroller-driven systems include:</p> <ul> <li>Home automation \u2013 smart thermostats, lighting systems, appliance control</li> <li>Wearables \u2013 smartwatches, fitness trackers, biometric sensors</li> <li>Automotive systems \u2013 engine control units, airbag deployment, infotainment</li> <li>Industrial automation \u2013 motors, valves, conveyor systems</li> <li>Consumer electronics \u2013 printers, game controllers, TVs, toys</li> <li>Medical devices \u2013 glucose monitors, blood pressure sensors, infusion pumps</li> </ul> <p>In each case, the microcontroller monitors inputs (like sensors or buttons), makes decisions via code, and triggers outputs (like motors, lights, or communications).</p>"},{"location":"chapters/chapter-1/#why-this-book-uses-the-pic24fj64ga002","title":"Why This Book Uses the PIC24FJ64GA002","text":"<p>This textbook focuses on the PIC24FJ64GA002, a 16-bit microcontroller from Microchip\u2019s PIC24 family. It strikes an ideal balance between complexity and learnability \u2014 advanced enough to support meaningful projects, but simple enough to teach the fundamentals of embedded systems clearly.</p> <p>The PIC24FJ64GA002 is widely used in academic and industry settings due to its:</p> <ul> <li>\u2705 Well-documented architecture</li> <li>\u2705 Rich set of on-chip peripherals</li> <li>\u2705 Smooth integration with MPLAB X IDE and the XC16 compiler</li> <li>\u2705 Strong ecosystem of tools, libraries, and example code</li> </ul>"},{"location":"chapters/chapter-1/#key-features-based-on-the-datasheet","title":"Key Features (Based on the Datasheet)","text":"Feature Description CPU Architecture 16-bit modified Harvard architecture Flash Memory 64 KB RAM 8 KB I/O Pins 24 I/O capable pins (in a 28 package pin) Timers Up to five 16-bit timers Communication UART, SPI, I2C ADC 10-bit resolution, up to 13 input channels Interrupt System Multi-priority vectored interrupt system Clock Options Internal and external oscillators (up to 32 MHz) Operating Voltage 2.0V to 3.6V <p>This microcontroller provides the right level of abstraction for learning low-level control, hardware interfacing, and system timing \u2014 without overwhelming new developers.</p> <p>\ud83d\udcce For full details, refer to the official PIC24FJ64GA002 Datasheet.</p>"},{"location":"chapters/chapter-1/#pic24fj64ga002-architecture-overview","title":"PIC24FJ64GA002 Architecture Overview","text":"<p>The PIC24FJ64GA002 is based on a 16-bit modified Harvard architecture. This means that it has separate memory spaces for instructions and data, which allows for more efficient fetching and execution of instructions.</p> <p>Unlike traditional Harvard designs, the PIC24 allows for flexible memory operations \u2014 instructions can access data memory, and certain instructions (like table reads/writes) can access program memory.</p>"},{"location":"chapters/chapter-1/#core-components-of-the-architecture","title":"Core Components of the Architecture","text":"Component Description CPU 16-bit core with a 2-stage pipeline (fetch/execute) Flash Memory 64 KB of non-volatile memory for storing program instructions RAM 8 KB of data memory for variables and temporary storage Registers 16 working registers (W0\u2013W15), used for all operations Stack Software-managed via dedicated stack pointer (no hardware push/pop instructions) Peripherals Timers, UART, SPI, I2C, ADC, output compare, input capture, etc. Interrupts Vectored interrupt system with multiple priority levels"},{"location":"chapters/chapter-1/#harvard-vs-von-neumann","title":"Harvard vs. Von Neumann","text":"<p>Most desktop computers use the Von Neumann architecture, where code and data share the same memory space. In contrast, the Harvard model separates them:</p> Feature Harvard Architecture Von Neumann Instruction Memory \u2705 Separate \u274c Shared Data Memory \u2705 Separate \u2705 Shared Performance \u2705 Faster (no bus conflict) \u274c Slower <p>The PIC24's modified Harvard design enables faster and more efficient execution for embedded systems.</p>"},{"location":"chapters/chapter-1/#register-centric-design","title":"Register-Centric Design","text":"<p>Most operations on the PIC24 use the 16 working registers (W0 to W15). These are: - Used as operands in arithmetic, logic, and data movement instructions - Referenced directly in assembly code - Some registers have special purposes (e.g., W15 is often used as the stack pointer)</p> <p>We'll explore register usage and memory addressing in more detail in the next chapter.</p>"},{"location":"chapters/chapter-2/","title":"Chapter 2: Assembly &amp; Addressing Modes","text":""},{"location":"chapters/chapter-2/#why-learn-assembly","title":"Why Learn Assembly?","text":"<p>Modern embedded systems are often programmed in high-level languages like C, but understanding assembly language is crucial for writing efficient, low-level code and truly mastering how a microcontroller works.</p> <p>Assembly gives you:</p> <ul> <li>\ud83d\udd0d Complete control over the CPU, memory, and peripheral access</li> <li>\u26a1 Performance optimizations that compilers can't always guarantee</li> <li>\ud83e\udde0 A deep understanding of what C code is actually doing \"under the hood\"</li> <li>\ud83d\udee0\ufe0f The ability to debug complex timing or hardware interaction issues</li> </ul> <p>Most high-level code on microcontrollers is eventually compiled into assembly \u2014 learning how to read and write it directly unlocks a new level of skill and insight.</p>"},{"location":"chapters/chapter-2/#pic24-assembly-basics","title":"PIC24 Assembly Basics","text":"<p>The PIC24 family uses a RISC (Reduced Instruction Set Computing) assembly language with a 16-bit word size. Each instruction typically executes in one cycle (excluding branching or memory fetches).</p> <p>In this chapter, we\u2019ll explore: - The basic syntax of PIC24 assembly - How data is moved between memory and registers - The different addressing modes (immediate, direct, indirect) - How to perform arithmetic and logical operations</p>"},{"location":"chapters/chapter-2/#basic-instruction-structure-syntax","title":"Basic Instruction Structure &amp; Syntax","text":"<p>Each PIC24 assembly instruction follows a simple, consistent structure:</p> <p>```asm OPCODE  OPERAND1, OPERAND2</p> <p>Where: - OPCODE is the operation to perform (e.g. MOV, ADD, SUB, etc.) - OPERAND1 is the source operand (what's being used for the operation) - OPERAND2 is the destination operand (where the result is stored)</p> <p>Example: Moving Data Between Registers     MOV     W1, W0      ; Copy contents of W1 into W0     MOV     #10, W2     ; Load the literal value 10 into W2</p> <p>In the previous example:  - MOV W1, W0 takes the contents of W1 and stores it in W0 - MOVE #10, W2 loads the immdeiate value 10 into W2</p> <p>Use semicolons (;) for comments in the PIC24 assembly:     CLR     W3          ; Clear W3 (set to zero)     ADD     W1, W2      ; Add W1 to W2 (result stored in W2)</p>"},{"location":"chapters/chapter-2/#working-registers-w0w15","title":"Working Registers (W0\u2013W15)","text":"<p>PIC24 has 16 general-purpose working registers used for arithmetic, data movement, memory access, and stack operations.</p> Register Purpose Notes W0\u2013W13 General-purpose registers Used for operations, temporary storage W14 Frame Pointer (FP) Typically points to current stack frame W15 Stack Pointer (SP) Automatically updated on function calls"},{"location":"chapters/chapter-2/#common-pic24-assembly-instructions","title":"Common PIC24 Assembly Instructions","text":"Instruction Description <code>MOV</code> Move data between registers or from an immediate value <code>ADD</code> Add two registers or a register and a literal <code>SUB</code> Subtract one register from another <code>CLR</code> Clear a register (set it to 0) <code>INC</code> / <code>DEC</code> Increment / Decrement a register <code>CP</code> Compare two values (affects flags; used with branches)"},{"location":"chapters/chapter-2/#addressing-modes-in-pic24","title":"Addressing Modes in PIC24","text":"<p>Addressing modes define how data is accessed in an instruction. The PIC24 supports several flexible addressing modes, giving you control over where data comes from and how it's used.</p> <p>Here are the most common addressing modes:</p>"},{"location":"chapters/chapter-2/#1-immediate-addressing","title":"1. Immediate Addressing","text":"<p>Loads a constant (literal) value directly into a register.</p> <p>```asm MOV     #25, W0     ; #25 is a literal constant.                     ; Common for setting values or initializing data.</p>"},{"location":"chapters/chapter-2/#2-register-direct","title":"2. Register Direct","text":"<p>Uses a working register directly as the source or desination.</p> <p>MOV     W1, W2      ; Copy contents of W1 into W2.                     ; Fastest and simplest form.                     ; All operations using Wn (W0\u2013W15) fall under this mode.</p>"},{"location":"chapters/chapter-2/#3-register-indirect","title":"3. Register Indirect","text":"<p>Uses a register as a pointer to data in memory</p> <p>MOV     [W5], W0    ; Move value from address pointed to by W5 into W0.                     ; W5 contains the address, not the value itself.</p>"},{"location":"chapters/chapter-2/#4-indirect-with-post-increment","title":"4. Indirect with Post-Increment","text":"<p>Automatically increments the pointer after the operation</p> <p>MOV     [W6++], W1  ; Move from memory pointed to by W6 into W1.                     ; Then W6 = W6 + 2.                     ; Useful for reading data from arrays (word-aligned).</p>"},{"location":"chapters/chapter-2/#5-indirect-with-pre-increment","title":"5. Indirect with Pre-Increment","text":"<p>Decrements the pointer before accessing the memory</p> <p>MOV     [--W6], W1  ; W6 = W6 - 2, then move from new address into W1.                     ; Useful when reading a stack or traversing backward.</p>"},{"location":"chapters/chapter-2/#6-literalwn","title":"6. Literal+Wn","text":"<p>Adds a literal offset to a base register</p> <p>MOV     [W8 + 4], W0   ; Move from address (W8 + 4) into W0.                        ; Often used for structure fields or array access.                        ; Literal must be word-aligned (multiple of 2).</p>"},{"location":"chapters/chapter-2/#chapter-summary","title":"Chapter Summary","text":"<p>In this chapter, we explored the fundamentals of PIC24 assembly language and how to work directly with the CPU's registers and memory.</p>"},{"location":"chapters/chapter-2/#what-you-learned","title":"What You Learned:","text":"<ul> <li>The basic syntax of PIC24 assembly instructions</li> <li>The role of working registers (<code>W0\u2013W15</code>)</li> <li>How to use the MOV, <code>ADD</code>, <code>SUB</code>, and <code>CLR</code> instructions</li> <li>The key addressing modes:</li> <li>Immediate</li> <li>Register direct</li> <li>Indirect with pre/post increment</li> <li>Literal offset + register</li> </ul>"},{"location":"chapters/chapter-2/#why-it-matters","title":"Why It Matters:","text":"<ul> <li>Assembly gives you precise control over hardware</li> <li>It's the foundation for understanding how C code interacts with hardware</li> <li>You\u2019ll need these concepts when working with the stack, interrupts, and I/O peripherals</li> </ul>"},{"location":"chapters/chapter-2/#up-next-stack-call-and-function-frames","title":"Up Next: Stack, Call, and Function Frames","text":"<p>In Chapter 3, we'll explore: - How the PIC24 manages function calls - The use of <code>W14</code> as the frame pointer - How the stack works for passing data and preserving state</p> <p>You'll learn to set up and tear down stack frames manually \u2014 a crucial skill for writing low-level code that\u2019s reliable and efficient.</p>"},{"location":"chapters/chapter-3/","title":"Welcome to My MkDocs Site","text":""},{"location":"chapters/chapter-3/#chapter-3","title":"Chapter 3","text":""},{"location":"chapters/chapter-4/","title":"Welcome to My MkDocs Site","text":""},{"location":"chapters/chapter-4/#chapter-4","title":"Chapter 4","text":""},{"location":"chapters/chapter-5/","title":"Welcome to My MkDocs Site","text":""},{"location":"chapters/chapter-5/#chapter-5","title":"Chapter 5","text":""},{"location":"chapters/chapter-6/","title":"Welcome to My MkDocs Site","text":""},{"location":"chapters/chapter-6/#chapter-6","title":"Chapter 6","text":""},{"location":"chapters/chapter-7/","title":"Welcome to My MkDocs Site","text":""},{"location":"chapters/chapter-7/#chapter-7","title":"Chapter 7","text":""},{"location":"chapters/chapter-8/","title":"Welcome to My MkDocs Site","text":""},{"location":"chapters/chapter-8/#chapter-8","title":"Chapter 8","text":""},{"location":"prompts/","title":"test for index - prompts","text":""},{"location":"prompts/enumerate-concepts/","title":"test for enumerate concepts","text":""},{"location":"prompts/feature-mapping/","title":"test for feature mapping","text":""},{"location":"prompts/generate-logo/","title":"test for generate logo","text":""},{"location":"sims/","title":"test for index - sims","text":""},{"location":"sims/sine-wave/","title":"Sine Wave Simulation","text":"<p>This simulation shows a real-time sine wave drawn using p5.js.</p>"},{"location":"tutorial/","title":"test for index - tutorial","text":""},{"location":"tutorial/admonitions/","title":"test for admonitions","text":""},{"location":"tutorial/getting-started/","title":"test for getting started","text":""},{"location":"tutorial/google-analytics/","title":"test for google analytics","text":""},{"location":"tutorial/navigation/","title":"test for navigation","text":""},{"location":"tutorial/quizzes/","title":"test for quizzes","text":""},{"location":"tutorial/upper-alpha-lists/","title":"test for upper alpha","text":""}]}